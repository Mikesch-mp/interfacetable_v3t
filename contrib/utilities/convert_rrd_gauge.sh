#!/bin/bash
#set -x

# ------------------------------------------------------------------------------------
# Script: convert_rrd_gauge.sh, script to convert the rrd files generated by 
#         interfacetable_v3t in mode portperfunit=bit (previously the default) 
#         to mode portperfunit=bps (default since interfacetable_v3t 0.05) 
# Usage: ./convert_rrd_gauge.sh PNP4NAGIOS_RRD_DIRECTORY
# Example: [icinga@server]$ ./convert_rrd_gauge.sh /usr/local/pnp4nagios/perfdata/rrd
# ------------------------------------------------------------------------------------
#
# What this script does:
#
# * Scan the subdirectories of the directory given to the script as argument, for rrd 
#   and xml files to be converted
#    => a list of files to be converted is reported, to let you check that the list is 
#       okay
# 
# * For each rrd file of the list
#  - the file mtime is gathered,
#  - a backup of the file is created (.bak)
#  - the RRD DST is converted from COUNTER to GAUGE
#  - the file is renamed with the corresponding "bps perfdata file name"
#  - mtime is reapplied to the file
# 
# * For each rrd file of the list
#  - the file mtime is gathered,
#  - a backup of the file is created (.bak)
#  - the labels and units are adapted to bps mode
#  - mtime is reapplied to the file
# Note: the xml files are automatically updated/replaced by pnp4nagios after some (each?) 
# perfdata insertions, so this part is not needed but allows to not wait and directly see 
# the graphs after the conversion.
#
# ------------------------------------------------------------------------------------


echo "######################## List of files to convert ##########################"
cntrrd=0
cntxml=0
for i in `ls -d $1/*`; do
    cd $i
    echo "=== Scanning directory $i ==="
    # RRD files
    cnt=0
    for x in `ls If_*Pkts*.rrd If_*Bits*.rrd 2>/dev/null`; do
        if test $cnt -eq 0
        then 
             echo "- RRD files:"
        fi
        echo "-  $x"
        cnt=`expr $cnt + 1`
        cntrrd=`expr $cntrrd + 1`
    done
    # XML files
    cnt=0
    for x in `ls If_*.xml 2>/dev/null`; do
        if grep "<UNIT>c</UNIT>" $x 1>/dev/null
        then
            if test $cnt -eq 0
            then
                echo "- XML files:"
            fi
            echo "-  $x"
            cnt=`expr $cnt + 1`
            cntxml=`expr $cntxml + 1`
        fi
    done
done
echo ""
echo "############################################################################"
echo " Total to convert:"
echo "  * rrd files: $cntrrd"
echo "  * xml files: $cntxml"
echo " Before continuing, review the list of files to be processed"
echo "############################################################################"
echo ""

read -p "Do you want to proceed with the conversion? [y|N]" -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # Proceed with the conversion
    echo ""
    for i in `ls -d $1/*`; do
        cd $i
        echo "######################## Directory $i ##########################"
    
        echo "=== Processing RRD files ==="
        for x in `ls If_*Pkts*.rrd If_*Bits*.rrd 2>/dev/null`; do
            
            # get mtime of the file
            xmtime=`stat -c %Y $x`
            
            echo "- Backuping rrd file $x as ${x}.bak -"
            cp -p "$x" "${x}.bak"
    
            echo "- Converting $x to DST GAUGE -"
            rrdtool tune $x -d 1:GAUGE
    
            y=`echo $x | sed 's/Pkts/Pps/'`
            y=`echo $y | sed 's/Bits/Bps/'`
            echo "- Renaming ${x} to ${y} -"
            mv -f ${x} ${y}
            
            # reapply kept mtime
            touch -d @$xmtime $x
        done
        echo "=== Processing XML files ==="
        for x in `ls If_*.xml 2>/dev/null`; do
            
            # get mtime of the file
            xmtime=`stat -c %Y $x`
            
            echo "- Backuping xml file $x as ${x}.bak -"
            cp -p "$x" "${x}.bak"
    
            echo "- Adapting $x -"
            sed -i 's/Bits/Bps/g' $x
            sed -i 's/Pkts/Pps/g' $x
            sed -i 's#<UNIT>c</UNIT>#<UNIT></UNIT>#g' $x
            
            # reapply kept mtime
            touch -d @$xmtime $x
        done
    done
fi


